CONCEITOS POO


OBJETO
======

COISA MATERIAL OU ABSTRATA QUE PODE SER PERCEBIDA PELOS SENTIDOS E DESCRITA POR MEIO DAS SUAS CARACTERÍSTICAS.
COMPORTAMENTOS E ESTADO ATUAL!!!!!




CARACTERÍSTICAS --->>> ATRIBUSTOS
COMPORTAMENTOS  --->>> MÉTODOS
ESTADO          --->>> CARACTERÍSTICAS ATUAIS DO OBJETOS (INSTÂNCIA)


CLASSE
=====

É O MOLDE DE UM OBJETO!!!!
CARACTERÍSTICAS, COMPORTAMENTOS E ESTADO QUE UM OBJETO DEVE TER


ABSTRAÇÃO
========
DEDUZIR AS CARACTERÍSTICAS DE UMA CLASSE

PILARES DO POO (VEREMOS DPS)

EHP

E - ENCAPSULAMENTO
    temos o conceito de encapsular que é:
        ocultar partes independentes da implementação, pemitindo construir partes invisíveis ao mundo exterior
        conseguimos conversar com objetos, chamando elas de mensagem!!!! 
        o canal de comunicação externo que esse objeto encapsulado tem é chamado de interface
    benefícios
        Tornar mudanças invisíveis
        Faciliar reutilização
        Reduzir efeitos colaterais
    interfaces iram carregar os métodos que a classe irá usar
    todos os atributos são privados quando estamos trabalhando com encapsulamento
    interfaces geralmente ficam em uma arquivo separado e são ligados com a classe deles por uma seta quando ilustramos
    no UML
H - HERANÇA
    Permite basear uma nova classe na definição de uma outra classe já existente.
    A herança será aplicada tanto para CARACTERÍSTICAS quanto para os commportamentos.
    EX:
        se a classe pai mãe tiver o método "Esguichar água" a classe filha também a terá!!!
    quando um temos uma classe filha que não implementa mais nada além do que ela herda temos uma herança chamada HERANÇA POBRE
    herança de implementação são todas as implementações que um filho herda (geralmente utilizado para implementar classas abs).
    herança para diferença é uma herança que herda coisa da mãe porém implementa coisas novas.
    
    ABSTRATO E FINAL
    temos os seguintes conceitos
    ->  Classe abstrata
            Não pode ser instanciada, só pode servir como progenitoria
    ->  Método abstrato
            Declarado mas não implementado na progenitora
    ->  Classe final
            Não pode ser herdada por outra classe
    ->  Método final
            Não pode ser sobrescrito por suas sub-classes. Obrigatóriamente herdado!!!!
P - POLIMORFISMO
    vem de poli (muitas) morfo(formas)
    Permite que o mesmo nome perfome vários comportamentos diferentes!!!!
    Assinatura do método
        Quantidade e os tipos dos parâmetros dos métodos
        EX:
            1) public float calcMedia(float r1, float r2);
            2) public int calcMedia(float r1, float r2);
            3) public float calcMedia(int bim, float r1, float r2);
            4) public float calcMedia(float r1, float r2, float r3, flat r4);

        Os métodos 1) e 2) possuem a mesma assinatura.
        O método 3) não possui a mesma assinatura de 1) pois têm um paramêtro a mais 
        O método 4) não possui a mesma assinatura de 1), 2), 3), pois têm parâmetros a mais que 1) e 3) e tem tipos diferentes
    Tipos de POLIMORFISMO
        1) Sobreposição
            
        2) Sobrecarga
    





VISIBILIDADE DE OBJETOS
=======================

PÚBLICO PRIVADO E PROTEGIDO

+PÚBLICO   ---> QUALQUER UM PODE FAZER USO
    A CLASSE ATUAL E TODAS AS OUTRAS PODERAM FAZER USO
-PRIVADO   ---> APENAS EU POSSO FAZER USO
    SOMENTE A CLASSE ATUAL PODERÁ FAZER USO
#PROTEGIDO ---> UMA PESSOA E SEUS DESCENDENTES (PROVALEMENTE HERANÇA)
    A CLASSE ATUAL E TODAS AS SUAS SUBCLASSES PODERAM USAR

SÃO REPRESENTADOS NO UML POR

+ - #

MÉTODOS ESPECIAIS
=================

MÉTODOS ACESSORES (GETTERS)
SÃO MÉTODOS QUE PERMITEM ACESSO A ATRIBUTOS PRIVADOS DE UM OBJETO!!!!

MÉTODOS MODIFICADORES (SETTERS)
SÃO MÉTODOS QUE PERMITEM A MODIFICAÇÃO DE ATRIBUTOS PRIVADOS DE UM OBJETO!!!!


